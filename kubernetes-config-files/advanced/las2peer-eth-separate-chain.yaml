apiVersion: apps/v1
kind: Deployment
metadata:
  name: las2peer-monitored-geth
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: las2peer-monitored-geth
  template:
    metadata:
      labels:
        io.kompose.service: las2peer-monitored-geth
    creationTimestamp: null
    spec:
      tolerations:
      - key: "node-role.kubernetes.io"
        operator: "Equal"
        value: "master"
        effect: "NoSchedule"
      containers:
      - name: netstats
        image: mslupczynski/eth-netstats:ma-mslupczynski
        imagePullPolicy: IfNotPresent
        env:
        - name: WS_SECRET
          value: eth-net-stats-secret
        ports:
          - containerPort: 3000
      - name: ethereum
        args: ["--datadir ~/.ethereum/devchain --nodekeyhex 091bd6067cb4612df85d9c1ff85cc47f259ced4d4cd99816b14f35650f59c322 --networkid 456719 --rpc --rpcaddr 0.0.0.0 --rpcapi db,personal,eth,net,web3,miner --rpccorsdomain=* --ws --wsaddr 0.0.0.0 --wsapi db,personal,eth,net,web3,miner --wsorigins=* --mine --minerthreads 1 --unlock 0,1 --password /dev/null --ethereum-mnemonic \"old puzzle vacant sing prison garment grief giraffe trap wire wrist kite begin crater dignity\""]
        command: ["/root/start.sh"]
        image: rwthacis/monitored-geth-client
        imagePullPolicy: IfNotPresent
        env:
        - name: ETHEREUM_MONITOR
          value: las2peer-monitored-geth:3000
        - name: GETH_VERBOSITY
          value: "3"
        ports:
        - containerPort: 30303
        - containerPort: 30303
          protocol: UDP
        - containerPort: 8545
        - containerPort: 8546
        resources:
          requests:
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: las2peer-monitored-geth
  name: las2peer-monitored-geth
spec:
  ports:
  - name: "ethererum"
    port: 30303
  - name: "ethereum-udp"
    port: 30303
    protocol: UDP  
  - name: "http-rpc-api"
    port: 8545
  - name: "ws-rpc-api"
    port: 8546
  - name: "netstats-ui"
    port: 3000
  selector:
    io.kompose.service: las2peer-monitored-geth 
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: las2peer-monitored-geth-ext
  name: las2peer-monitored-geth-ext
spec:
  ports:
  - name: "netstats-ui"
    port: 3000
    nodePort: 31285
  selector:
    io.kompose.service: las2peer-monitored-geth
  type: NodePort